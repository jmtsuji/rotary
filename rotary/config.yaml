# Config file for rotary

## Directory for database installation
db_dir: "/Data/databases/rotary"

## Resources
threads: 20
# Memory in Gigabytes
#   At least ~55-60 GB is needed
memory: 100

## Long read QC
# Minimum read length
minlength: 1000
# Minimum average quality (PHRED) score. Q13 is ~5% expected error rate.
minavgquality: 13

## Assembly
# nano-hq (if <5% error) or nano-raw
flye_input_mode: "nano-hq"
# Optional: specify the error rate of the input reads as a fraction (e.g., use 0.03 for 3% error). This is mostly useful if you are using nano-hq with reads having >95% accuracy.
flye_read_error: "auto"
# Run Flye in --meta mode? Set to "True", with quotation marks, to use meta mode. Anything else (e.g., "False") will not use meta mode.
flye_meta_mode: "False"
# By default, Flye performs one round of long read polishing after assembly
flye_polishing_rounds: 1

## End repair
# Flye will be used to re-assemble a short region (50-100 kb) around the ends of circular contigs.
#   The re-assembly will be stitched to the original contigs using the circlator merge module.
#   This process repairs an added/missing bases around the contig ends.
# Minimum % ID needed between original and stitch contigs for merging
circlator_merge_min_id: 99
# Minimum hit length (bp) needed between original and stitch contigs for merging
circlator_merge_min_length: 10000
# Minimum distance (bp) between end of original contig and nucmer hit
circlator_merge_ref_end: 100
# Minimum distance (bp) between end of merge contig and nucmer hit
circlator_merge_reassemble_end: 100
# By default, end repair fails if a circular contig can't be end-repaired (i.e., if a contig can't be built that spans
#   the ends of the contig). Failing to build the end-spanning contig can happen for several reasons (e.g., if that
#   region is a repeat-rich region), even if the contig is really circular. Set keep_unrepaired_contigs to 'True' to keep
#   the pipeline going even if end repair fails on a contig. If set to 'True', then the original assembled versions of
#   any contigs that fail end repair will be used for downstream steps and will still be treated as circular.
keep_unrepaired_contigs: 'False'

## Polishing
# Model: set this parameter to match the flow cell version / basecalling model you used to generate the long reads.
#        See details in the Medaka Github repo's "Models" section: https://github.com/nanoporetech/medaka#models
medaka_model: "r941_min_sup_g507"
# Batch size: related to memory usage; can reduce if you get OOM (out of memory) errors
medaka_batch_size: 100
# Should the pipeline polish with short reads using polypolish.
polish_with_short_reads: 'True'

## Post-polishing contig filter
# My advice: Only filter by short reads if you have short reads.
#            If you have long reads, filter by long reads (40x minimum depth recommended by Sereika et al., 2022, Nat Methods, for R10.4 flow cells)
meandepth_cutoff_short_read: 10
meandepth_cutoff_long_read: "None"
# Only contigs with this or greater % of bases covered by reads will be kept (e.g., 95%)
evenness_cutoff_short_read: 95
evenness_cutoff_long_read: "None"

## Circularization
# Download the following HMM to use for a start gene.
# RpoB is TIGR02013.1.
hmm_url: "https://ftp.ncbi.nlm.nih.gov/hmm/current/hmm_PGAP.HMM/TIGR02013.1.HMM"
hmmsearch_evalue: 1e-40

## Annotation
# GTDB-Tk phylogenetic placement mode:
#    Set to "full_tree" to use the GTDB-Tk v1 method (needs ~320 GB RAM!)
#    Otherwise, it will use the v2 phylogenetic placement method needing ~55 GB RAM.
gtdbtk_mode: "default"
# EggNOG annotation sensitivity mode (using DIAMOND)
#    Options: fast, mid-sensitive, sensitive, more-sensitive, very-sensitive, ultra-sensitive
eggnog_sensmode: "sensitive"
# The search tool that emapper.py should use (diamond or mmseqs).
eggnog_search_tool: 'mmseqs'
